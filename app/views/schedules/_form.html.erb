<script src="http://maps.googleapis.com/maps/api/js?key=AIzaSyC7icpVNHCpzkJjilXkACn8VG9HlSe0u3s&sensor=false"></script>
<script>
    var directionsDisplay;
    var directionsService = new google.maps.DirectionsService();
    var mapCanvas;

//    //change polyline color
//    var polylineOptionsActual = new google.maps.Polyline({
//        strokeColor: '#3C00FF',
//        strokeOpacity: 0.5,
//        strokeWeight: 3
//    });

 //Fix bug change color of polylineOptionActual
//    olyOptionsActual and polyOptionsPlan should be polylineOptions
//    anonymous objects, not Polylines.
//
//            Javascript Object properties are case sensitive:
//            so not:
//            strokecolor: '#FF0000',
//                    strokeopacity: 1.0,
//            strokeweight: 10
//    use:
//            strokeColor: '#FF0000',
//                    strokeOpacity: 1.0,
//            strokeWeight: 10
    var polylineOptionsActual = {
        strokeColor: '#3C00FF',
        strokeOpacity: 0.5,
        strokeWeight: 3
    };

    var rendererOptions = {
        polylineOptions:polylineOptionsActual,
        suppressMarkers : true
    }

    var clientObjects = [];
    var clientListAddress = [];

    var stepDisplay;
    var markerArray = [];

    function initialize() {

        directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);

        // Instantiate an info window to hold step text.
        stepDisplay = new google.maps.InfoWindow();

        var latlng = new google.maps.LatLng(21.0333333, 105.85000000000002);
        var mapOptions = {
            zoom: 13,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            center: latlng
        }
        mapCanvas = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
        directionsDisplay.setMap(mapCanvas);
    }

    function addHiddenControls(waypoints_order){
        for(var i=0;i<waypoints_order.length;i++){
            $('#clientaddressdiv').append('<input name="meeting['+i+'][id]" type="hidden" value="'+clientListAddress[waypoints_order[i]]["id"]+'"/>');
            $('#clientaddressdiv').append('<input name="meeting['+i+'][address]" type="hidden" value="'+clientListAddress[waypoints_order[i]]['location']["address"]+'"/>');
        }
    }

    function calcRoute() {

        // First, remove any existing markers from the map.
        for (i = 0; i < markerArray.length; i++) {
            markerArray[i].setMap(null);
        }

        // Now, clear the array itself.
        markerArray = [];

        var start = document.getElementById('schedule_hq_location_id').value;
        var end = document.getElementById('schedule_ending_location_id').value;

//        var start = 'Ha Noi, Viet Nam';
//        var end = 'Ho Chi Minh, Viet Nam';
        var waypts = [];
//        var checkboxArray = document.getElementById('waypoints');
//        for (var i = 0; i < checkboxArray.length; i++) {
//            if (checkboxArray.options[i].selected == true) {
//                waypts.push({
//                    location:checkboxArray[i].value,
//                    stopover:true});
//            }
//        }

        for (var i = 0; i < clientListAddress.length; i++) {
                waypts.push({
                    location:clientListAddress[i]['location']['address'],
                    stopover:true});
            }

        var request = {
            origin: start,
            destination: end,
            waypoints: waypts,
            optimizeWaypoints: true,
            travelMode: google.maps.TravelMode.DRIVING
        };
        directionsService.route(request, function(response, status) {
            if (status == google.maps.DirectionsStatus.OK) {
                directionsDisplay.setDirections(response);
                showSteps(response);
                var route = response.routes[0];
                var summaryPanel = document.getElementById('directions_panel');
                summaryPanel.innerHTML = '';
                // For each route, display summary information.
                for (var i = 0; i < route.legs.length; i++) {
                    var routeSegment = i + 1;
                    summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment + '</b><br>';
                    summaryPanel.innerHTML += route.legs[i].start_address + ' to ';
                    summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
                    summaryPanel.innerHTML += route.legs[i].distance.text + '<br>';
                    summaryPanel.innerHTML += route.legs[i].duration.text + '<br><br>';
                }
//                summaryPanel.innerHTML += 'Waypoint order:'+route.waypoint_order+'<br>';
                var startTime = $('#schedule_start_time').val();
                var endTime = $('#schedule_end_time').val();

                if (calculateDurationTime(route,diffBetweenTwoTimes(startTime,endTime))){
                    addHiddenControls(route.waypoint_order);
                }
                else{
                    alert("time to travel exeed working time, please try choosing another way!");
                }


            }
        });

    }


    function diffBetweenTwoTimes(startTime, endTime){
        var a = moment(startTime, "HH:mm:ss");
        var b = moment(endTime, "HH:mm:ss");
        return b.diff(a,'seconds');
    }


    function convertSecondsToTime(raw){
//        var raw = "-54";
        var time = parseInt(raw,10);
        time = time < 0 ? 0 : time;

        var minutes = Math.floor(time / 60);
        var seconds = time % 60;

        minutes = minutes < 10 ? "0"+minutes : minutes;
        seconds = seconds < 10 ? "0"+seconds : seconds;

//        alert(minutes+":"+seconds);
        return minutes+":"+seconds
    }

    function calculateDurationTime(route, maxTotalTime){
        var totalTime = 0;

        for (var i = 0; i < route.legs.length; i++) {
            totalTime += route.legs[i].duration.value;
        }
        alert(totalTime);
        if (totalTime/60 > maxTotalTime){
            return false;
        }
        else{
            return true;
        }

    }

    function showSteps(directionResult) {
        // For each step, place a marker, and add the text to the marker's
        // info window. Also attach the marker to an array so we
        // can keep track of it and remove it when calculating new
        // routes.
//        var myRoute = directionResult.routes[0].legs[0];
//
//        for (var i = 0; i < myRoute.steps.length; i++) {
//            var icon = "https://chart.googleapis.com/chart?chst=d_map_pin_letter&chld=" + i + "|FF0000|000000";
//            if (i == 0) {
//                icon = "https://chart.googleapis.com/chart?chst=d_map_xpin_icon&chld=pin_star|car-dealer|00FFFF|FF0000";
//            }
//            var marker = new google.maps.Marker({
//                position: myRoute.steps[i].start_point,
//                map: mapCanvas,
//                icon: icon
//            });
//            attachInstructionText(marker, myRoute.steps[i].instructions);
//            markerArray.push(marker);
//        }
//        var marker = new google.maps.Marker({
//            position: myRoute.steps[i - 1].end_point,
//            map: mapCanvas,
//            icon: "https://chart.googleapis.com/chart?chst=d_map_pin_icon&chld=flag|ADDE63"
//        });

        var myRoute = directionResult.routes[0];

        for (var i = 0; i < myRoute.legs.length; i++) {
            var icon = "https://chart.googleapis.com/chart?chst=d_map_pin_letter&chld=" + i + "|FF0000|000000";
            if (i == 0) {
                icon = "https://chart.googleapis.com/chart?chst=d_map_xpin_icon&chld=pin_star|car-dealer|00FFFF|FF0000";
            }
            var marker = new google.maps.Marker({
                position: myRoute.legs[i].start_location,
                map: mapCanvas,
                icon: icon
            });
            attachInstructionText(marker, myRoute.legs[i].start_address);
            markerArray.push(marker);
        }
        var marker = new google.maps.Marker({
            position: myRoute.legs[myRoute.legs.length - 1].end_location,
            map: mapCanvas,
            icon: "https://chart.googleapis.com/chart?chst=d_map_pin_icon&chld=flag|ADDE63"
        });
            markerArray.push(marker);

        google.maps.event.trigger(markerArray[0], "click");
    }

    function attachInstructionText(marker, text) {
        google.maps.event.addListener(marker, 'click', function() {
            // Open an info window when the marker is clicked on,
            // containing the text of the step.
            stepDisplay.setContent(text);
            stepDisplay.open(mapCanvas, marker);
        });
    }

</script>
</head>
<body>

<div class="steps-wizard">
  <div class="step1 step-active"></div>
  <div class="step2"></div>
  <div class="step3"></div>
</div>

<%= simple_form_for(@schedule) do |f| %>
    <% if @schedule.errors.any? %>
        <%= f.error_notification %>
        <%= display_base_errors @schedule %>
    <% end %>
  <div class="steps-content">
    <!-- STEP 1 -->
    <div class="step1-content content-active">
      <%= f.input :schedule_date,:as=>:string, input_html: { :class=> 'date-picker','data-date-format'=>"dd-mm-yyyy"} %>
      <div class="row-fluid">
        <label for="schedule_start_time">Start Time</label>
      </div>

      <div class="control-group">
        <div class="input-append bootstrap-timepicker">
          <input id="schedule_start_time" type="text" class="input-small" name="schedule[start_time]"/>
															<span class="add-on">
																<i class="icon-time"></i>
															</span>
        </div>
      </div>
      <div class="row-fluid">
        <label for="schedule_end_time">End Time</label>
      </div>

      <div class="control-group">
        <div class="input-append bootstrap-timepicker">
          <input id="schedule_end_time" type="text" class="input-small" name="schedule[end_time]"/>
															<span class="add-on">
																<i class="icon-time"></i>
															</span>
        </div>
      </div>

      <%= f.input :average_meeting_duration, :autofocus => true %>
      <%= f.input :transport %>
      <%= f.input :speed %>
      <%= f.input :hq_location_id %>
      <%= f.input :ending_location_id %>
      <a href="#" class="navigation btn btn-primary" data-nav="next">Choose Client</a>
    </div>

    <!-- STEP 2 -->
    <div class="step2-content">
       <%= render :partial => 'clients/client_list', :locals => {:clients=>@clients} %>
      <a href="#" class="navigation btn btn-primary" data-nav="next">Generate direction</a>
    </div>
    <!-- STEP 3 -->
    <div class="step3-content">
      <div id="clientaddressdiv"></div>
      <div id="map-canvas" style="width:800px;height:600px;"></div>
      <div id="control_panel">
        <!--<div style="margin:20px;border-width:2px;">-->
          <!--<b>Start:</b>-->
          <!--<select id="start">-->
            <!--<option value="Ha Noi">Ha Noi</option>-->
          <!--</select>-->
          <!--<br>-->
          <!--<b>Waypoints:</b> <br>-->
          <!--<i>(Ctrl-Click for multiple selection)</i> <br>-->
          <!--<select multiple id="waypoints">-->
            <!--<option value="Ninh Binh">Ninh Binh</option>-->
            <!--<option value="Thanh Hoa">Thanh Hoa</option>-->
            <!--<option value="Nghe An">Nghe An</option>-->
            <!--<option value="Hue">Hue</option>-->
          <!--</select>-->
          <!--<br>-->
          <!--<b>End:</b>-->
          <!--<select id="end">-->
            <!--<option value="Da Nang">Da Nang</option>-->
            <!--<option value="Ho Chi Minh">Ho Chi Minh</option>-->
          <!--</select>-->
          <!--<br>-->
          <!--<input type="button" value="Get Way" onclick="calcRoute();">-->
        <!--</div>-->
        <div id="directions_panel" style="margin:20px;background-color:#FFEE77;"></div>
      </div>
      <%= f.button :submit, :class => 'btn-primary' %>
    </div>
  </div>
    <!--<a href="#" class="navigation" data-nav="prev">Prev</a>&nbsp;&nbsp;<a href="#" class="navigation" data-nav="next">Next</a>-->
<% end %>


<script>
$(function() {
    var $pages = $(".steps-content").children("div"),
            $steps = $(".steps-wizard").children("div"),
            totalPages = $pages.length,
            count = 0;

    $(".navigation").on("click",function(e){
        e.preventDefault();
        var navigate = $(this).data("nav");
        if(navigate == "next"){
            count++;
        }else{
            count--;
        }

        if(count > totalPages){
            count = 0;
        }
        if(count < totalPages && count >=0){
            $pages.removeClass('content-active').eq(count).addClass('content-active');
            $steps.removeClass('step-active').eq(count).addClass('step-active');
        }

        if (count == 2){
            diffBetweenTwoTimes();

            initialize();
            $('input[name="clients[]"]:checked').each(function() {
//                clientListAddress.push(js_clients_array[this.value]['location']['address']);
                clientListAddress.push(js_clients_array[this.value]);
            });

            calcRoute();
        }
    });


    //add clients model objects to javascript collection


//    $("input.datetimepicker").each(function(i) {
//        return $(this).datetimepicker({
//            dateFormat: "yy-mm-dd",
//            timeFormat: "hh:mm tt"
//        });
//    });
//    $("input.datepicker").each(function(i) {
//        return $(this).datepicker({
//            altFormat: "yy-mm-dd",
//            dateFormat: "mm/dd/yy",
//            altField: $(this).next()
//        });
//    })
// ;
    $('.date-picker').datepicker().next().on(ace.click_event, function(){
        $(this).prev().focus();
    });
    $('#schedule_start_time').timepicker({
        minuteStep: 1,
        showSeconds: true,
        showMeridian: false
    });

    $('#schedule_end_time').timepicker({
        minuteStep: 1,
        showSeconds: true,
        showMeridian: false
    });
});

</script>
